---

# Get exisiting lxc containers list
- name: Get list of lxd containers
  command: lxc list -c n --format csv
  register: container_names

#- name: Show container_names
#  debug:
#    var: container_names.stdout_lines

- name: Debug container
  debug:
    msg: "{{ container | from_yaml }}"
    verbosity: 2

- name: "Show {{ container.name }} devices"
  debug:
    msg: "{{ lookup('template', 'nic_devices.yaml.j2') | from_yaml }}"
    verbosity: 2
  vars:
    container: "{{ container }}"

#- name: Show manual build alternative
#  debug:
#    msg: "lxc init ubuntu:{{ansible_distribution_release}} {{ container.name }} -p default -p cte-user << EOF \n{{lookup('template', 'nic_devices.yaml.j2') | from_yaml}}\nEOF"
#    verbosity: 2
#  vars:
#    user:
#      name: "{{ ansible_user_id }}"
#      password: "{{ cte_user_password | default('password') }}"
#      gecos: "{{ ansible_user_gecos.split(',')[0] }}"
#    container: "{{ container }}"
#    ssh_keys:
#      - "{{ lookup('file', ansible_user_dir + '/.ssh/id_rsa.pub') }}"
#      - "{{ lookup('file', ansible_user_dir + '/.ssh/id_ecdsa.pub') }}"

# Build a new container
- name: "Create container: {{ container.name }}"
  lxd_container:
    name: "{{ container.name }}"
#    state: started
    state: stopped
    devices: "{{ lookup('template', 'nic_devices.yaml.j2') | from_yaml }}"
#    config: "{{ 'user.user-data:{' +  lookup('template', 'user-data.yaml.j2') + '}' | from_yaml }}"
    source:
      type: image
      mode: pull
      server: https://cloud-images.ubuntu.com/releases
      protocol: simplestreams
      alias: "{{ansible_distribution_release}}"
    profiles: ["default", "cte-user"]
  when:
    - ansible_system == "Linux"
    - container.name not in container_names.stdout_lines
#  register: lxc
  vars:
    user:
      name: "{{ ansible_user_id }}"
      password: "{{ cte_user_password | default('password') }}"
      gecos: "{{ ansible_user_gecos.split(',')[0] }}"
    container: "{{ container }}"
    ssh_keys:
      - "{{ lookup('file', ansible_user_dir + '/.ssh/id_rsa.pub') }}"
      - "{{ lookup('file', ansible_user_dir + '/.ssh/id_ecdsa.pub') }}"

- name: "Start container: {{ container.name }}"
  lxd_container:
    name: "{{ container.name }}"
    state: started
    wait_for_ipv4_addresses: true
    timeout: 60
  register: lxc

#- name: Configure known_hosts
#  # TODO: check always to keep known_hosts keys in sync
#  block:
#  - name: Check if container is a known host
#    command:
#      cmd: "ssh-keygen -F '{{ container.nics[0].ipv4 | ipaddr('address') }}'"
#    #stat:
#    #  path: "/home/{{ ansible_user_id }}/.ssh/known_hosts"
#    register: known_hosts
#
#    # TODO: Clear keys from known_hosts only if old
#  - name: Clear container from known hosts
#    command:
#      cmd: "ssh-keygen -f '/home/{{ ansible_user_id }}/.ssh/known_hosts' -R '{{ container.nics[0].ipv4 | ipaddr('address') }}'"
#    when: 'known_hosts.rc == 0'
#    #when: known_hosts.stat.exists
#
#    # TODO: Add keys to known_hosts only if new
#  when: container.name not in container_names.stdout_lines

- name: Register SSH host in ~/.ssh/config
  blockinfile:
    path: "{{ ansible_user_dir }}/.ssh/config"
    create: yes
    block: "{{ lookup('template', 'ssh_host.j2') }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK :: {{ container.name }}"
  vars:
    host:
      name: "{{ container.name }}"
      ipv4: "{{ container.nics[0].ipv4 | ipaddr('address') }}"
      fqdn: "{{ container.name }}.{{ container.nics[0].parent.domain }}"

# lxc info pub1 | awk '$1=="eth0:" && $2=="inet" {print $3}'

- name: Register host in /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: "^{{ container.nics[0].ipv4 | ipaddr('address') }}"
    line: "{{ lookup('template', 'host.j2') }}"
    owner: root
    group: root
    mode: 0644
  become: yes
  vars:
    host:
      name: "{{ container.name }}"
      ipv4: "{{ container.nics[0].ipv4 | ipaddr('address') }}"
      fqdn: "{{ container.name }}.{{ container.nics[0].parent.domain }}"
