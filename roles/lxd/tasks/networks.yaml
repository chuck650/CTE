---
#- name: Debug network vars
#  debug:
#    msg: "{{ network.value | from_yaml }}"

#- name: Debug template
#  debug:
#    msg: "{{ lookup('template', 'network_options.j2') | from_yaml }}"

- name: "Setup network"
  command:
    cmd: |
      lxc network create {{ network.value.name }}
      {{ lookup('template', 'network_options.j2') }}
  register: lxc_network
  become: yes
  when: ansible_system == "Linux"
  changed_when:
    - lxc_network.rc == 0
  failed_when:
    - lxc_network.rc > 0
    - 'not "The network already exists" in lxc_network.stderr'
  notify: Persist iptables rules
  args:
    creates: /sys/devices/virtual/net/{{ network.value.name }}

# Enable NAT on upstream network from PIA network via ansible_default_ipv4.interface
- name: Enable NAT on upsteam network
  iptables:
    chain: POSTROUTING
    table: nat
    source: "{{network.value.net}}"
    out_interface: "{{ansible_default_ipv4.interface}}"
    jump: MASQUERADE
    comment: "{{network.value.name}}"
  become: yes
  notify: Persist iptables rules
  when:
    - ansible_system == 'Linux'
    - network.key == 'public'

- name: Check if system supports resolvectl
  stat:
    path: /usr/bin/resolvectl2
  register: resolvectl
  failed_when: false

#- name: Wait a few seconds
#  pause:
#    seconds: 10

- name: Wait for dns to listen on network
  wait_for:
    host: "{{ network.value.address | ipaddr('address') }}"
    port: 53
    delay: 5
    timeout: 60
    state: started
  when:
    - network.value.address is defined
    - network.value.address | ipaddr

- name: Set systemd-resolve dns address
  command:
    cmd: "{{ (resolvectl.stat.exists and resolvectl.stat.executable) | ternary(dns.resolvectl, dns.systemd_resolve) }}"
  become: yes
  when:
    - ansible_system == "Linux"
    - network.value.gateway is defined
  changed_when: false
  vars:
    dns:
      resolvectl: resolvectl dns {{ network.value.name }} {{ network.value.gateway | ipaddr('address') }}
      systemd_resolve: systemd-resolve --set-dns={{ network.value.gateway | ipaddr('address') }} --interface={{ network.value.name }}
